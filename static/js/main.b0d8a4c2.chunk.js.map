{"version":3,"sources":["logo.svg","utils.js","Board.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","chunk","arr","size","Array","from","length","Math","ceil","v","i","slice","Board","_ref","board","_ref$running","running","updateBoard","boardSize","boardArr","sqrt","klass","react_default","a","createElement","map","row","y","className","key","cell","x","onClick","e","Number","concat","defaultProps","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","repeat","aliveProportion","gameInterval","generation","bind","assertThisInitialized","generateBoard","toggleGame","handleGenerateBoard","preventDefault","_this$state","threshold","window","alert","_board","m","floor","random","_ref2","shuffle","join","setState","_this2","_this$state2","rowLength","_b","newBoard","deepFlatten","apply","toConsumableArray","item","isArray","neighbors","getNeigbors","aliveCount","reduce","total","cellStatus","arguments","undefined","determineStatusOfCell","_this3","setInterval","advanceBoard","clearInterval","array","upperBound","left","right","top","bottom","idx","updatedCell","_this4","value","target","objectSpread","_this$state3","startGame","_this5","btnKlass","onChange","handleUpdateBoardSize","onSubmit","type","step","src_Board","assign","Component","Boolean","location","hostname","match","$","jquery","jQuery","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b0d8a4c2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nexport function chunk(arr, size) {\n\n    return Array.from({\n            length: Math.ceil(arr.length / size),\n        },\n        (v, i) => arr.slice(i * size, i * size + size)\n    )\n}\n\nexport function deepFlatten(arr) {\n\n    return [].concat(...arr.map(item => {\n        if (Array.isArray(item)) {\n\n            return deepFlatten(item);\n        }\n\n        return item\n    }));\n}\n\nexport function shuffle(arr) {\n\n    let m = arr.length;\n    while (m) {\n        const i = Math.floor(Math.random() * m--);\n        [arr[m], arr[i]] = [arr[i], arr[m]]\n    }\n    return arr;\n}\n\n\n/*\n\n@param cell {number}\n@param aliveCount {number}\n@returns status {boolean}\nAny live cell with fewer than two live neighbors dies, as if by underpopulation.\nAny live cell with two or three live neighbors lives on to the next generation.\nAny live cell with more than three live neighbors dies, as if by overpopulation.\nAny dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.\n */\n\nexport function determineStatusOfCell(cellStatus = 1, aliveCount = 0) {\n\n    if (cellStatus === 1) {\n        // is alive\n\n        return !(2 < aliveCount || 3 < aliveCount);\n\n    } else {\n        // is dead;\n\n        return aliveCount === 3;\n\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Board.css';\nimport {chunk} from \"./utils\";\n\n\nfunction Board({board, running = false, updateBoard, boardSize}) {\n\n    const _board = Array.from(board);\n\n\n    const boardArr = chunk(_board, Math.sqrt(boardSize));\n\n    let klass = 'cell ';\n\n    if (2500 === boardSize) {\n\n        klass += 'one-thousand';\n    } else if (10000 === boardSize) {\n\n        klass += 'ten-thousand';\n    }\n\n    return (\n        <div>\n            {\n                boardArr.map((row, y) => {\n                    return (\n                        <div className={'row'} key={y}>\n                            {row.map((cell, x) => {\n                                return (\n                                    <div\n                                        key={x}\n                                        onClick={e => !running && updateBoard(cell, x, y)}\n                                        className={Number(cell) === 1 ? `${klass} bg-success` : `${klass} bg-warning`}>\n                                    </div>\n                                )\n                            })}\n                        </div>\n                    )\n                })\n            }\n        </div>\n    );\n}\n\nBoard.propTypes = {};\nBoard.defaultProps = {};\n\nexport default Board;\n","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Board from \"./Board\";\nimport {determineStatusOfCell, deepFlatten, chunk, shuffle} from \"./utils\";\n\nconst boardSize = 100;\n\nclass App extends Component {\n\n\n    state = {\n        board: '0'.repeat(boardSize),\n        boardSize,\n        running: false,\n        aliveProportion: .5,\n        gameInterval: null,\n        generation: 0\n    };\n\n    constructor() {\n\n        super();\n\n        this.updateBoard = this.updateBoard.bind(this);\n        this.generateBoard = this.generateBoard.bind(this);\n        this.toggleGame = this.toggleGame.bind(this);\n        this.handleGenerateBoard = this.handleGenerateBoard.bind(this);\n\n\n    }\n\n    componentDidMount() {\n        this.generateBoard();\n    }\n\n\n    handleGenerateBoard(e) {\n        e.preventDefault();\n        this.generateBoard();\n\n    }\n\n    generateBoard() {\n\n        const {aliveProportion, running, boardSize} = this.state;\n\n        const threshold = aliveProportion * boardSize;\n\n        if (running) {\n\n            window.alert('invalid request');\n            return false;\n        }\n        const board = Array.from({length: boardSize}, (v, i) => i < threshold ? 1 : 0);\n\n        const shuffledBoard = shuffle(board);\n\n        const _board = shuffledBoard.join(\"\");\n\n        this.setState({board: _board});\n\n\n    }\n\n    advanceBoard() {\n\n        const {board, boardSize} = this.state;\n\n        const rowLength = Math.sqrt(boardSize);\n\n        const _b = chunk(Array.from(board), rowLength);\n\n        const neighbors = _b.map((row, y) => row.map((cell, x) => {\n            return {\n                neighbors: this.getNeigbors(Number(cell), x, y, _b),\n                cell: Number(cell),\n                x,\n                y,\n            }\n        }));\n\n        const bb = neighbors.map(row => {\n            return row.map(cell => {\n                const aliveCount = cell.neighbors.reduce((total, item) => total + Number(item), 0);\n                const alive = determineStatusOfCell(cell.cell, aliveCount);\n\n                if (alive) {\n\n                    return 1;\n                }\n\n                return 0;\n            })\n        });\n        const newBoard = deepFlatten(bb).join(\"\");\n\n        this.setState({board: newBoard, generation: this.state.generation + 1});\n\n\n    }\n\n    startGame() {\n\n        const state = {\n            running: true,\n            generation: 0,\n            gameInterval: setInterval(() => this.advanceBoard(), 100),\n        };\n        if (this.state.gameInterval) {\n\n            clearInterval(this.state.gameInterval);\n\n            this.setState({gameInterval: null, running: false, generation: 0}, () => {\n                this.setState(state);\n            });\n\n        }\n        else this.setState(state);\n    }\n\n    getNeigbors(cell, x, y, array) {\n\n        const upperBound = Math.sqrt(this.state.boardSize) - 1;\n\n        let left = x === 0 ? upperBound : x - 1;\n\n        let right = x === upperBound ? 0 : x + 1;\n\n        let top = y === 0 ? upperBound : y - 1;\n\n        let bottom = y === upperBound ? 0 : y + 1;\n\n        return [\n            array[left][y],\n            array[x][top],\n            array[left][top],\n            array[right][y],\n            array[x][bottom],\n            array[right][bottom],\n            array[right][top],\n            array[left][bottom],\n        ].map(Number);\n\n    }\n\n    updateBoard(cell, x, y) {\n\n        const {board} = this.state;\n\n        const idx = y * Math.sqrt(this.state.boardSize) + x;\n\n        const _board = Array.from(board);\n\n        const updatedCell = Number(_board[idx]) === 1 ? 0 : 1;\n\n        const _newBoard = [..._board.slice(0, idx), updatedCell, ..._board.slice(idx + 1)];\n\n        const newBoard = _newBoard.join(\"\");\n\n        this.setState({board: newBoard});\n    }\n\n    handleUpdateBoardSize(e) {\n\n        e.preventDefault();\n\n        const {target: {value}} = e;\n\n        this.setState({\n            ...this.state,\n            boardSize: Number(value),\n            running: false,\n            board: '0'.repeat(boardSize)\n        }, () => {\n\n            this.generateBoard();\n        });\n\n    }\n\n    toggleGame() {\n\n\n        const {running, gameInterval} = this.state;\n        if (running) {\n\n            clearInterval(gameInterval);\n\n            this.setState({\n                running: false,\n                gameInterval: null,\n            });\n\n        }\n        else this.startGame();\n    }\n\n    render() {\n        const btnKlass = this.state.running ? 'btn-danger' : 'btn-success';\n        return (\n            <div className=\"app container\">\n                <h1 className={'my-3 text-center text-uppercase'}>Game of Life\n                    <span className={'pl-3'}>\n                        <button className={'btn text-capitalize ' + btnKlass} onClick={this.toggleGame}>\n                        {this.state.running ? 'stop' : 'start'}\n                    </button>\n\n                    </span>\n                </h1>\n                <div className={'row'}>\n                    <div className={'col-md-3'}>\n                        <div className={'row'}>\n                            <form>\n                                <label>Cells</label>\n                                <select\n                                    className={'form-control'}\n                                    value={this.state.boardSize} onChange={e => this.handleUpdateBoardSize(e)}>\n                                    <option value={9}>9</option>\n                                    <option value={100}>100</option>\n                                    <option value={2500}>2500</option>\n                                    <option value={10000}>10000</option>\n                                </select>\n                            </form>\n                        </div>\n                        <div className={'row my-3'}>\n                            <form onSubmit={e => this.handleGenerateBoard(e)}>\n                                <label>\n                                    Alive %\n                                </label>\n                                <input\n                                    onChange={e => this.setState({aliveProportion: e.target.value})}\n                                    className={'form-control'} type={'number'} value={this.state.aliveProportion}\n                                    step={0.05}\n                                />\n                                <button type={'submit'} className={'my-2 btn btn-info'}>Generate</button>\n                            </form>\n                        </div>\n                        <div className={'row my-3'}>\n                            <h3 className={this.state.running ? null : 'd-none'}>\n\n                                <b>Generation: </b>\n                                <span className={'mono'}>\n                                    {this.state.generation}\n                                </span>\n                            </h3>\n                        </div>\n\n\n                    </div>\n                    <div className={'col-md-9 row d-flex my-3'}>\n                        <Board\n                            {...this.state}\n                            updateBoard={this.updateBoard}\n                        />\n                    </div>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport $ from 'jquery';\nwindow.$ = $;\nwindow.jquery = $;\nwindow.jQuery = $;\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}